'use strict';
var path = require("path");
var webpack = require('webpack');
var YFilesOptimizerPlugin = require('@yworks/optimizer/webpack-plugin');


var baseConfig = {
  output: {
    path: path.resolve(__dirname, 'app/dist/'),
    publicPath: 'dist',
    filename: '[name].js'
  },
  <% if (useTypeScript) { %>
  module: {
    rules: [
      { test: /\.tsx?$/, loader: "ts-loader" }
    ]
  },
  <% } %><% if (!useTypeScript) { %>
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /(node_modules|bower_components|lib)/,
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env']
        }
      }
    ]
  },<% } %>
  optimization: {
    splitChunks: {
      cacheGroups: {
        lib: {
          test: /([\\/]lib)|([\\/]node_modules[\\/])/,
          name: 'lib',
          chunks: 'all'
        }
      }
    }
  }
};

module.exports = function (env, options) {

  console.log("Running webpack...");

  if (options.mode === 'development') {
    return Object.assign({
      mode: 'development',<% if (useTypeInfo) { %>
      entry: {
        app: [
          path.resolve('<%= scriptsPath%>/yfiles-typeinfo.js'),
          path.resolve('<%= scriptsPath + appScript %>')
        ]
      },<% } else { %>entry: {
        app: path.resolve('<%= scriptsPath + appScript %>')
      },<% } %>
      <% if (!useLocalNpm) { %>
      resolve: {
        modules: ['node_modules', path.resolve('<%= libPath %>')],
      },<% } %>
      devServer: {
        contentBase: [path.join(__dirname, './app')],
        compress: true,
        port: 9003
      },
      // don't add the default SourceMapDevToolPlugin config
      devtool: false,
      plugins: [
        new webpack.SourceMapDevToolPlugin({
          filename: '[file].map',
          // add source maps for non-library code to enable convenient debugging
          exclude: ['lib.js']
        })
      ]
    }, baseConfig);
  } else {
    return Object.assign({
      mode: 'production',
      entry: {
        app: path.resolve('<%= scriptsPath + appScript %>')
      },
      <% if (!useLocalNpm) { %>
      resolve: {
        modules: ['node_modules', path.resolve('<%= libPath %>')],
      },<% } %>
      plugins: [
        new YFilesOptimizerPlugin({
          logLevel: 'info'
        })
      ]
    }, baseConfig);
  }
};
